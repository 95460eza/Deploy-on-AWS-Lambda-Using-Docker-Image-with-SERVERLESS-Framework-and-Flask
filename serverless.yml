
# This file is the main config file for your Serverless service with default values. We've included some commented out config examples here that you can uncomment to use and 
# you can also add more config options for more control. For full config options, check the docs: docs.serverless.com
# Name you choose MUST have length <= 64
service: docker-flask
# app and org values for use with: dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific version of Serverless . Check out our docs for more details.
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: eu-north-1

  # If you don't specify a S3 bucket, Serverless will create and manage a DEFAULT one named "serverless-<account-id>-<region>"
  deploymentBucket:
    name: bucket-for-webcontainerflask

#  stage: dev
# BELOW is Used to define Docker images that Serverless WILL be PUSHED to Amazon Elastic Container Registry (ECR).!!!!
# Different from "imageUri" in "functions" section for USING EXISTING Docker image ON ECR!!!
#  ecr:
#    images:
#      basicflaskapp:
#        uri: 095893807368.dkr.ecr.eu-north-1.amazonaws.com/repository-for-docker-images:basicflaskapp
# you can overwrite defaults here

functions:
  # Choose a name for your Lambda function. MUST have COMBINED WITH "service" length <= 64
  flask-serverless-framework:

    # Either "handler" HERE or "image" property BELOW (not both) can be set
    # For HANDLER FUNCTION: "path to the ".py" file containing the Flask OBJECT" then Name of the HANDLER function WITHIN that module (.py file)
    # Ex: "FOLDER NAME with the App Definition Code (if it is not located in the same one as serverless.yml file"."FILE NAME (.py) with the App Definition Code"."HANDLER FUNCTION NAME"    
    #handler: app.app.lambda_handler
    #handler: app/app.lambda_handler

    # With "image" below image Serverless assumes that the image is available LOCALLY and will be built and pushed to the registry during deployment. It is used in conjonction
    # with the provider.ecr.images
    image: 095893807368.dkr.ecr.eu-north-1.amazonaws.com/repository-for-docker-images:basicflaskapp
    # Use BELOW if you want to include additional configurations related to the image (i.e. more lines!)
    #  name: 095893807368.dkr.ecr.eu-north-1.amazonaws.com/repository-for-docker-images:basicflaskapp

    # Define the HTTP path for which the Lambda function will be triggered. The Lambda function will be invoked for any HTTP request to that path. The curly braces {} indicate a
    # path parameter, and proxy+ is a wildcard that matches any path and captures it as a parameter named proxy. With this configuration, your Lambda function will be triggered
    # for any HTTP request under the base path specified (/ in this case). The ACTUAL route information will be available as a parameter in your Lambda function (event.pathParameters.proxy).
    # If your App routes start with /api, you can use path: /api/{proxy+}
    events:
      - http:
          #path: /
          path: /{proxy+}
          method: ANY
          cors: true

    # The ports parameter HERE specifies the ports to be EXPOSED IN THE DOCKER CONTAINER when the Lambda function INSIDE is an application that listens on a specific port.
    # The left of ":" is the port of the host machine to use to access the App and the right is the port the application inside the container listens to (from the APP DEFINITION CODE).
    # DIFFERENT from "EXPOSE in Dockerfile" that is used to inform Docker that the container will listen (receive requests) on which ports at runtime. That does not actually publish the 
    # specified ports to the host machine
    #ports:
    #  - 8000:5000
  # you can add packaging information here 
#    package:
#      individually: true
#    include:
#      - app/*.*
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
